<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Versal Engineering</title>
 <link href="http://engineering.versal.com/atom.xml" rel="self"/>
 <link href="http://engineering.versal.com"/>
 <updated>2012-11-09T14:20:42-08:00</updated>
 <id>http://engineering.versal.com</id>
 <author>
   <name>Versal</name>
   <email>info@versal.com</email>
 </author>

 
 <entry>
   <title>Engineering at Versal</title>
   <link href="http://engineering.versal.com/frameworks/2012/11/07/engineering-at-versal"/>
   <updated>2012-11-07T17:38:00-08:00</updated>
   <id>http://engineering.versal.com/frameworks/2012/11/07/engineering-at-versal</id>
   <content type="html">&lt;p&gt;There are many choices for implementing RESTful API architectures in Scala. Some of us here at Versal had a good experience with Play 2.0 and Swagger, so initially we went that route. However, Play configuration has quickly become unwieldy. As we use CoffeeScript on the front end, we didn&amp;#8217;t need any of the templating functionality of Play, and we also wondered whether Play is as performant as it claims to be.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The engineering spirit of Versal demands that any assumption be tested. So for the most performant web framework, we went ahead and tested a whole bunch of them. The results are available as the &lt;a href='http://githib.com/Versal/scamper'&gt;Scamper&lt;/a&gt; project. They are quite surprising.&lt;/p&gt;</content>
 </entry>
 
 
</feed>