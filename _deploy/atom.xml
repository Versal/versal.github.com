<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Engineering at Versal]]></title>
  <link href="http://engineering.versal.com/atom.xml" rel="self"/>
  <link href="http://engineering.versal.com/"/>
  <updated>2012-11-08T14:47:41-08:00</updated>
  <id>http://engineering.versal.com/</id>
  <author>
    <name><![CDATA[Versal Group]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Engineering at Versal]]></title>
    <link href="http://engineering.versal.com/blog/2012/11/07/engineering-at-versal/"/>
    <updated>2012-11-07T17:38:00-08:00</updated>
    <id>http://engineering.versal.com/blog/2012/11/07/engineering-at-versal</id>
    <content type="html"><![CDATA[<p>There are many choices for implementing RESTful API architectures in Scala.  Some of us here at Versal had a good experience with Play 2.0 and Swagger, so initially we went that route.  However, Play configuration has quickly become unwieldy.  As we use CoffeeScript on the front end, we didn&#8217;t need any of the templating functionality of Play, and we also wondered whether Play is as performant as it claims to be.</p>

<p>The engineering spirit of Versal demands that any assumption be tested.  So for the most performant web framework, we went ahead and tested a whole bunch of them.  The results are available as the <a href="Scamper">http://githib.com/Versal/scamper</a> project.</p>
]]></content>
  </entry>
  
</feed>
